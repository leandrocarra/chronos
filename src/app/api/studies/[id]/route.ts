import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma-client";

// Middleware para adicionar cabe√ßalhos CORS
function corsHeaders() {
  return {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, Authorization",
  };
}

// Manipulador de requisi√ß√µes OPTIONS para preflight CORS
export async function OPTIONS() {
  return NextResponse.json({}, { headers: corsHeaders() });
}

// GET - Buscar um estudo espec√≠fico
export async function GET(
  request: NextRequest,
  context: { params: { id: string } }
) {
  try {
    const id = context.params.id;
    console.log(`üîç API: GET /api/studies/${id} - Buscando estudo espec√≠fico`);

    if (!id) {
      console.log("‚ùå API: ID do estudo n√£o fornecido");
      return NextResponse.json(
        { error: "ID do estudo n√£o fornecido" },
        { status: 400, headers: corsHeaders() }
      );
    }

    const study = await prisma.study.findUnique({
      where: { id },
    });

    if (!study) {
      console.log(`‚ùå API: Estudo com ID ${id} n√£o encontrado`);
      return NextResponse.json(
        { error: "Estudo n√£o encontrado" },
        { status: 404, headers: corsHeaders() }
      );
    }

    console.log(`‚úÖ API: Estudo encontrado: ${study.subject}`);
    return NextResponse.json(study, { headers: corsHeaders() });
  } catch (error) {
    console.error(`‚ùå API: Erro ao buscar estudo com ID ${context.params.id || 'desconhecido'}:`, error);
    return NextResponse.json(
      { error: "Erro ao buscar o estudo" },
      { status: 500, headers: corsHeaders() }
    );
  }
}

// PUT - Atualizar um estudo espec√≠fico
export async function PUT(
  request: NextRequest,
  context: { params: { id: string } }
) {
  try {
    const id = context.params.id;
    console.log(`üîç API: PUT /api/studies/${id} - Atualizando estudo`);

    if (!id) {
      console.log("‚ùå API: ID do estudo n√£o fornecido");
      return NextResponse.json(
        { error: "ID do estudo n√£o fornecido" },
        { status: 400, headers: corsHeaders() }
      );
    }

    const body = await request.json();
    console.log(`üîç API: Dados para atualiza√ß√£o:`, body);

    // Verifica se o estudo existe
    const existingStudy = await prisma.study.findUnique({
      where: { id },
    });

    if (!existingStudy) {
      console.log(`‚ùå API: Estudo com ID ${id} n√£o encontrado para atualiza√ß√£o`);
      return NextResponse.json(
        { error: "Estudo n√£o encontrado" },
        { status: 404, headers: corsHeaders() }
      );
    }

    // Atualiza o estudo
    const updatedStudy = await prisma.study.update({
      where: { id },
      data: body,
    });

    console.log(`‚úÖ API: Estudo atualizado: ${updatedStudy.subject}`);
    return NextResponse.json(updatedStudy, { headers: corsHeaders() });
  } catch (error) {
    console.error(`‚ùå API: Erro ao atualizar estudo com ID ${context.params.id || 'desconhecido'}:`, error);
    return NextResponse.json(
      { error: "Erro ao atualizar o estudo" },
      { status: 500, headers: corsHeaders() }
    );
  }
}

// DELETE - Excluir um estudo espec√≠fico
export async function DELETE(
  request: NextRequest,
  context: { params: { id: string } }
) {
  try {
    const id = context.params.id;
    console.log(`üîç API: DELETE /api/studies/${id} - Excluindo estudo`);

    if (!id) {
      console.log("‚ùå API: ID do estudo n√£o fornecido para exclus√£o");
      return NextResponse.json(
        { error: "ID do estudo n√£o fornecido" },
        { status: 400, headers: corsHeaders() }
      );
    }

    // Verifica se o estudo existe
    const existingStudy = await prisma.study.findUnique({
      where: { id },
    });

    if (!existingStudy) {
      console.log(`‚ùå API: Estudo com ID ${id} n√£o encontrado para exclus√£o`);
      return NextResponse.json(
        { error: "Estudo n√£o encontrado" },
        { status: 404, headers: corsHeaders() }
      );
    }

    // Exclui o estudo
    await prisma.study.delete({
      where: { id },
    });

    console.log(`‚úÖ API: Estudo com ID ${id} exclu√≠do com sucesso`);
    return NextResponse.json(
      { message: "Estudo exclu√≠do com sucesso" },
      { status: 200, headers: corsHeaders() }
    );
  } catch (error) {
    console.error(`‚ùå API: Erro ao excluir estudo com ID ${context.params.id || 'desconhecido'}:`, error);
    return NextResponse.json(
      { error: "Erro ao excluir o estudo" },
      { status: 500, headers: corsHeaders() }
    );
  }
} 