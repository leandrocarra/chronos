generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String         @unique
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timerSessions TimerSession[]
  studies       Study[]

  @@map("users")
}

model TimerSession {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title               String
  description         String?
  seconds             Int                   @default(0)
  startedAt           DateTime              @default(now()) @map("started_at") @db.Timestamptz(6)
  endedAt             DateTime?             @map("ended_at") @db.Timestamptz(6)
  userId              String                @map("user_id") @db.Uuid
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user                User                  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timer_sessions_tags timer_sessions_tags[]

  @@map("timer_sessions")
}

model Tag {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @unique
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  timer_sessions_tags timer_sessions_tags[]

  @@map("tags")
}

model timer_sessions_tags {
  timer_session_id String       @db.Uuid
  tag_id           String       @db.Uuid
  tags             Tag          @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  timer_sessions   TimerSession @relation(fields: [timer_session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([timer_session_id, tag_id])
}

model Study {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject     String
  userId      String   @map("user_id") @db.Uuid
  seconds     Int      @default(0)
  isActive    Boolean  @default(false) @map("is_active")
  isPaused    Boolean  @default(true) @map("is_paused")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("studies")
}
